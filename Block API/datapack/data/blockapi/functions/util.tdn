@on compile

var generateFunctionTree = function(root, interval, splits, nodeFunction, leafFunction, usefulInterval) {
    do if(usefulInterval == null) {
        eval usefulInterval = interval
        
        var intervalSize = (int)Math.pow(splits, Math.ceil(Math.log(interval.range) / Math.log(splits)))
        eval interval = new int_range(interval.min, interval.min + intervalSize)
    }
    var intervalSize = interval.range / splits
    
    do if(intervalSize > 1) {
        var i = 0
        for(i = 0; i < splits; i++) {
            var innerInterval = new int_range(
                    interval.min + intervalSize * i,
                    interval.min + intervalSize * (i + 1)
            )
            var clippedInterval = new int_range(
                    innerInterval.min,
                    Math.min(innerInterval.max - 1, usefulInterval.max - 1)
            )
            do if(innerInterval.min >= usefulInterval.max) {
                continue
            }
            
            var nodeName = root + "/" + ((string) clippedInterval).replace("..", "_")
            
            define function ${(resource) nodeName} {
                eval generateFunctionTree(nodeName, innerInterval, splits, nodeFunction, leafFunction, usefulInterval)
            }
            eval nodeFunction(clippedInterval, (resource) nodeName)
        }
    } else {
        var i = 0
        for(i = interval.min; i < interval.max && i < usefulInterval.max; i++) {
            eval leafFunction(i)
        }
    }
}
